{"version":3,"file":"art-kit.min.js","sources":["../src/Util.js","../src/math/Analysis.js","../src/geometry/Point.js","../src/math/Range.js","../src/geometry/Path.js","../src/position/Telemetrics.js","../src/math/Random.js","../src/position/RelativePosition.js","../src/media/Timeline.js","../src/pixels/Colormap.js","../src/math/Constants.js","../src/geometry/Arc.js","../src/io/MouseTelemetrics.js","../src/media/AnimationPlayer.js","../src/media/CuePoint.js","../src/noise/SimplexNoise.js","../src/pixels/Color.js"],"sourcesContent":["export function buffer( buf, val, bufferLength = buf.length ) {\n\tif ( val ) {\n\t\tbuf.unshift( val );\n\t\twhile ( buf.length > bufferLength ) {\n\t\t\tbuf.pop();\n\t\t}\n\t}\n\treturn buf;\n}\n\nexport function sampleFn( fn, period, numSamples ) {\n\treturn new Array( numSamples )\n\t\t.map( ( n, i ) => fn( period * i / numSamples ) );\n}\n","export function mean( arr ) {\n\treturn arr.reduce( sum ) / arr.length;\n}\n\nexport function easedMean( arr, direction = -1, easing = 1 ) {\n\tlet easeFn,\n\t\tsteps = arr.length;\n\tif ( typeof easing === 'number' ) {\n\t\tif ( easing === 0 ) return mean( arr );\n\t\teaseFn = ( i ) => Math.pow( i, easing );\n\t} else {\n\t\teaseFn = easing;\n\t}\n\n\tlet weights = new Array( arr.length )\n\t\t.map( ( n, i ) => easeFn( ( i + 1 ) / steps ) );\n\n\tif ( direction < 0 ) weights = weights.reverse();\n\treturn weightedAverage( arr, weights );\n}\n\nexport function weightedAverage( values, weights ) {\n\tlet sumWeight = weights.reduce( sum );\n\tlet weighted = values.map( ( val, i ) => val * weights[ i ] );\n\tlet sumWeighted = weighted.reduce( sum );\n\treturn sumWeighted / ( values.length * sumWeight );\n}\n\nexport function sum( a, b ) {\n\treturn a + b;\n}\n\nexport function normalize( arr ) {\n\tlet max = Math.max( ...arr );\n\treturn arr.map( ( v ) => v / max );\n}\n","import {\n\tmean\n} from '../math/Analysis';\nimport {\n\tbuffer\n} from '../Util';\n\nexport default class Point {\n\tconstructor( x, y, bufferLength = 1 ) {\n\t\tthis.bufferLength = bufferLength;\n\t\tthis.bufferX = [];\n\t\tthis.bufferY = [];\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\tthis.angle = 0;\n\t\tthis.speed = 0;\n\t}\n\n\tset x( val ) {\n\t\tbuffer( this.bufferX, this._x, this.bufferLength );\n\t\tthis._x = val;\n\t}\n\n\tset y( val ) {\n\t\tbuffer( this.bufferY, this._y, this.bufferLength );\n\t\tthis._y = val;\n\t}\n\n\tget x() {\n\t\treturn this._x;\n\t}\n\n\tget y() {\n\t\treturn this._y;\n\t}\n\n\tget smoothX() {\n\t\treturn mean( this.bufferX );\n\t}\n\n\tget smoothY() {\n\t\treturn mean( this.bufferY );\n\t}\n}\n\nexport function midpoint( x0, y0, x1, y1 ) {\n\tlet halfdx = 0.5 * ( x1 - x0 );\n\tlet halfdy = 0.5 * ( y1 - y0 );\n\treturn {\n\t\tx: x0 + halfdx,\n\t\ty: y0 + halfdy\n\t};\n}\n","export function lerp( a, b, i ) {\n\treturn b + ( b - a ) * i;\n}\n\nexport function clamp( n, min, max ) {\n\treturn Math.min( Math.max( min, n ), max );\n}\n","import { midpoint } from './Point';\nimport { lerp } from '../math/Range';\n\nexport function length( path ) {}\n\nexport function smooth( path, resolution, flatPath = false ) {\n\tif ( flatPath ) path = toPoints( path );\n\tlet midpoints = [];\n\tfor ( let i = 0, endi = path.length - 1; i < endi; i += 1 ) {\n\t\tmidpoints = midpoints.concat( midpoint( path[ i ].x, path[ i ].y, path[ i + 1 ].x, path[ i + 1 ].y ) );\n\t}\n\tlet curves = [];\n\tfor ( let i = 0, endi = midpoints.length - 1; i < endi; i += 1 ) {\n\t\tcurves.push( cubicBezier( midpoints[ i ].x, midpoints[ i ].y, path[ i + 1 ].x, path[ i + 1 ].y, midpoints[ i + 1 ].x, midpoints[ i + 1 ].y, resolution ) );\n\t}\n\t// flatten bezier curves into one path\n\tlet points = curves.reduce( ( arr, bez ) => arr.concat( toArray( bez ) ), [] );\n\t// add endpoints\n\tpoints.unshift( path[ 0 ] );\n\tpoints.push( path[ path.length - 1 ] );\n\tif ( flatPath ) return toArray( points );\n\treturn points;\n}\n\nexport function toArray( path ) {\n\treturn path.reduce( ( arr, pt ) => arr.concat( pt.x, pt.y ), [] );\n}\n\nexport function toPoints( path ) {\n\tlet arr = [];\n\tfor ( let i = 0, endi = path.length; i < endi; i += 2 ) {\n\t\tarr.push( { x: path[ i ], y: path[ i + 1 ] } );\n\t}\n\treturn arr;\n}\n\nexport function interpolate( x0, y0, x1, y1, resolution ) {\n\tresolution = Math.max( 1, resolution || 20 );\n\tlet step = 0;\n\tlet path = [];\n\tdo {\n\t\tpath.push( lerp( x1, x0, step / resolution ) );\n\t\tpath.push( lerp( y1, y0, step / resolution ) );\n\t} while ( ++step <= resolution );\n\treturn path;\n}\n\nexport function cubicBezierPosition( x0, y0, x1, y1, x2, y2, t ) {\n\tlet x = ( 1 - t ) * ( 1 - t ) * x0 + 2 * ( 1 - t ) * t * x1 + t * t * x2;\n\tlet y = ( 1 - t ) * ( 1 - t ) * y0 + 2 * ( 1 - t ) * t * y1 + t * t * y2;\n\treturn { x, y };\n}\n\nexport function cubicBezier( x0, y0, cpX, cpY, x1, y1, resolution ) {\n\t// default resolution to 20\n\tresolution = Math.max( 1, resolution || 20 );\n\tlet step = 0;\n\tlet path = [];\n\tdo {\n\t\tpath.push( cubicBezierPosition( x0, y0, cpX, cpY, x1, y1, step / resolution ) );\n\t} while ( ++step <= resolution );\n\treturn path;\n}\n","import {\n\tPI,\n\tTAU\n} from '../math/Constants';\n\nexport function angle( x0, y0, x1, y1, pos ) {\n\tlet [ dx, dy ] = delta( x0, y0, x1, y1 );\n\tlet ang = Math.atan2( dy, dx );\n\treturn pos ? ( ang + TAU ) % TAU : ang;\n}\n\nexport function dist( x0, y0, x1, y1 ) {\n\tlet [ dx, dy ] = delta( x0, y0, x1, y1 );\n\treturn Math.sqrt( ( dx * dx ) + ( dy * dy ) );\n}\n\nexport function delta( x0, y0, x1, y1 ) {\n\treturn [ x1 - x0, y1 - y0 ];\n}\n\nexport function normalizeAngle( rad ) {\n\treturn ( TAU + rad ) % TAU;\n}\n\nexport function d2r( deg ) {\n\treturn TAU * deg / 360;\n}\n\nexport function r2d( rad ) {\n\treturn rad * 360 / TAU;\n}\n","// PSEUDO RANDOM GENERATOR\n// taken from wikipedia\nvar _m_ = 4294967296,\n\t// a - 1 should be divisible by m's prime factors\n\t_a_ = 1664525,\n\t// c and m should be co-prime\n\t_c_ = 1013904223;\n// Setting the seed\nvar _z_ = 123456789;\n\nexport default function random( min = 0, max, seed ) {\n\t// seed is optional\n\tif ( typeof seed === 'number' ) {\n\t\trandom.setSeed( seed );\n\t}\n\t// make max optional\n\tif ( min !== undefined && max === undefined ) {\n\t\tmax = min;\n\t\tmin = 0;\n\t} else {\n\t\tmax = max || 1;\n\t}\n\tlet range = max - min;\n\t_z_ = ( _a_ * _z_ + _c_ ) % _m_;\n\treturn min + ( range * _z_ / _m_ );\n}\n\nrandom.setSeed = ( seed ) => ( _z_ = seed );\n","/* eslint-env es6 */\nmodule.exports = {\n\tCrossed,\n\tCrossedForward,\n\tCrossedReverse,\n\tEntered,\n\tHopped,\n\tIsBetween,\n\tLeft,\n\tTriggerBetween\n};\n\nexport function TriggerBetween( x, px, start, end, onEntered, onLeft ) {\n\tonEntered = onEntered || noop;\n\tonLeft = onLeft || noop;\n\tif ( Entered( x, px, start, end ) ) {\n\t\tonEntered();\n\t\treturn 1;\n\t} else if ( Left( x, px, start, end ) || Hopped( x, px, start, end ) ) {\n\t\tonLeft();\n\t\treturn -1;\n\t}\n\treturn false;\n}\n\nexport function IsBetween( x, start, end ) {\n\t// flip if moving in reverse\n\tif ( end < start ) {\n\t\tvar t = start;\n\t\tstart = end;\n\t\tend = t;\n\t}\n\treturn x >= start && x < end;\n}\n\nexport function Entered( x, px, start, end ) {\n\tstart = start || 0;\n\tend = end || 1;\n\t// if it is now between and was not between\n\treturn IsBetween( x, start, end ) && !IsBetween( px, start, end );\n}\n\nexport function Left( x, px, start, end ) {\n\tstart = start || 0;\n\tend = end || 1;\n\t// if it was between and is now not between\n\treturn IsBetween( px, start, end ) && !IsBetween( x, start, end );\n}\n\nexport function Hopped( x, px, start, end ) {\n\tstart = start || 0;\n\tend = end || 1;\n\t// if px is below the range and x is above the range\n\t// or\n\t// if px is above the range and x is below the range\n\treturn ( px < start && x >= end ) || ( px >= end && x < start );\n}\n\nexport function Crossed( x, px, target ) {\n\tif ( CrossedForward( x, px, target ) || CrossedReverse( x, px, target ) ) {\n\t\treturn true;\n\t}\n\treturn false;\n}\n\nexport function CrossedForward( x, px, target ) {\n\t// was below and now above\n\tif ( x > target && px <= target ) {\n\t\treturn true;\n\t}\n\treturn false;\n}\n\nexport function CrossedReverse( x, px, target ) {\n\t// was above and now below\n\tif ( x <= target && px > target ) {\n\t\treturn true;\n\t}\n\treturn false;\n}\n\nfunction noop() {}\n","import CuePoint from './CuePoint';\nimport { CrossedForward } from '../position/RelativePosition';\n\n// for consistency all time is in milliseconds\nexport default class Timeline {\n\tconstructor() {\n\t\tthis._cuePoints = [];\n\t\tthis._time = 0;\n\t\tthis._prevTime = 0;\n\t\tthis.active = true;\n\t\tthis.duration = 0;\n\t}\n\n\tadd( time, callback ) {\n\t\tlet cp = time instanceof CuePoint ? time : new CuePoint( time, callback );\n\t\tthis._cuePoints.push( cp );\n\t\tthis._cuePoints.sort( sortByTime );\n\t}\n\n\treset() {\n\t\tthis._cuePoints\n\t\t\t.forEach( ( cp ) => cp.reset() );\n\t}\n\n\tset time( val ) {\n\t\tthis._prevTime = this._time;\n\t\tthis._time = val;\n\t\tif ( !this.active ) return val;\n\t\tthis._cuePoints\n\t\t\t.filter( ( cp ) => CrossedForward( this._time, this._prevTime, cp.time ) )\n\t\t\t.forEach( ( cp ) => cp.execute() );\n\t\treturn val;\n\t}\n}\n\nfunction sortByTime( a, b ) {\n\treturn a.time - b.time;\n}\n","export class Colormap {\n\tconstructor( img, colormapSize = 255 ) {\n\t\tthis.image = null;\n\t\tthis.colormapData = null;\n\t\tthis.colormap = null;\n\t\tthis.colormapCtx = null;\n\t\tthis._colormapSize = colormapSize;\n\t\tif ( img instanceof Image ) {\n\t\t\t// create and parse a canvas element\n\t\t\tthis.image = img;\n\t\t\tthis.createCanvas();\n\t\t} else if ( typeof img === 'object' && img.getContext !== undefined ) {\n\t\t\t// we just got passed a canvas element\n\t\t\tthis.image = img;\n\t\t\tthis.createCanvas();\n\t\t} else if ( typeof img === 'string' ) {\n\t\t\t// prep loading colormap\n\t\t\tthis.loadColormap( img );\n\t\t}\n\t}\n\n\tset colormapSize( val ) {\n\t\tthis._colormapSize = val;\n\t\tif ( this.image && this.colormapCtx ) {\n\t\t\tthis.colormap.height = this.colormap.width = this._colormapSize;\n\t\t\tthis.colormapData = drawToCtx( this.image, this.colormapCtx, this._colormapSize );\n\t\t}\n\t\treturn val;\n\t}\n\n\tonLoad() {}\n\tonError() {}\n\tonProgress() {};\n\n\tgetPixel( x, y ) {\n\t\tvar data = this.colormapData.data;\n\t\tvar propX = Math.abs( x );\n\t\tvar propY = Math.abs( y );\n\t\tpropX %= 1;\n\t\tpropY %= 1;\n\t\tvar col = ( propX * this._colormapSize ) << 2; // multiply by 4 per pixel to account for [r,g,b,a] order\n\t\tvar row = ( propY * this._colormapSize ) >> 0; // math.floor\n\t\tvar rowWidth = this.colormapData.width << 2; // values per row\n\t\tvar pixelIndex = col + ( row * rowWidth );\n\t\treturn ( data[ pixelIndex ] << 16 ) | ( data[ pixelIndex + 1 ] << 8 ) | data[ pixelIndex + 2 ];\n\t}\n\n\tloadColormap( src ) {\n\t\tthis.image = new Image();\n\t\tthis.image.crossOrigin = 'anonymous';\n\t\tthis.image.src = src;\n\t\tthis.image.onload = this.createCanvas.bind( this );\n\t\tthis.image.onerror = this.onError.bind( this );\n\t\tthis.image.onProgress = this.onProgress.bind( this );\n\t}\n\n\tcreateCanvas() {\n\t\tthis.colormap = document.createElement( 'canvas' );\n\t\tthis.colormapCtx = this.colormap.getContext( '2d' );\n\t\tthis.colormap.height = this.colormap.width = this._colormapSize;\n\t\tthis.colormapData = drawToCtx( this.image, this.colormapCtx, this._colormapSize );\n\t}\n\n\tdispose() {\n\t\tthis.image.onLoad = this.image.onerror = this.image.onprogress = null;\n\t}\n}\n\nfunction drawToCtx( img, ctx ) {\n\tctx.drawImage( img, 0, 0, ctx.width, ctx.height );\n\treturn ctx.getImageData( 0, 0, ctx.width, ctx.height );\n}\n","import {\n\tsampleFn\n} from '../Util';\n\nexport const PI = Math.PI;\nexport const TAU = PI * 2;\nexport const PHI = 1.6180339887498948482;\nexport const e = 2.71828182845904523536;\n\nexport const SIN_WAVE = sampleFn( Math.sin, TAU, 1000 );\nexport const COS_WAVE = sampleFn( Math.cos, TAU, 1000 );\nexport const TAN_WAVE = sampleFn( Math.tan, TAU, 1000 );\n","import Point from './Point';\nimport { TAU } from '../math/Constants';\n\nexport class Arc {\n\tconstructor( radius, segments, close = true, startAngle = 0, endAngle = TAU, direction = 1 ) {\n\t\tthis._points = [];\n\t\tlet sweep = endAngle - startAngle;\n\t\tlet segmentSweep = sweep / segments;\n\t\tsegments = close ? segments + 1 : segments;\n\t\tlet i = 0;\n\t\twhile ( i < segments ) {\n\t\t\tthis._points.push( new Point(\n\t\t\t\tradius * Math.cos( startAngle + direction * i * segmentSweep ),\n\t\t\t\tradius * Math.sin( startAngle + direction * i * segmentSweep )\n\t\t\t) );\n\t\t\ti++;\n\t\t}\n\t\tthis._translate = {\n\t\t\tx: 0,\n\t\t\ty: 0\n\t\t};\n\t}\n\n\tresetPosition() {\n\t\tthis.translate( -this._translate.x, -this._translate.y );\n\t\treturn this;\n\t}\n\n\ttranslate( x = 0, y = 0 ) {\n\t\tthis._translate.x += x;\n\t\tthis._translate.y += y;\n\t\tthis._points.forEach( ( pt ) => {\n\t\t\tpt.x += x;\n\t\t\tpt.y += y;\n\t\t} );\n\t\treturn this;\n\t}\n\n\tget points() {\n\t\treturn this._points;\n\t}\n}\n","import {\n\tmean\n} from '../math/Analysis';\nimport {\n\tbuffer\n} from '../Util';\nimport {\n\tdelta,\n\tdist,\n\tangle\n} from '../position/Telemetrics';\n\nexport default class MouseTelemetrics {\n\tconstructor( options ) {\n\t\toptions = options || {};\n\t\tthis.el = options.el || window;\n\t\tthis.bufferLength = options.bufferLength || 4;\n\n\t\tthis._state = {\n\t\t\tevent: null,\n\t\t\tbuffer: [],\n\t\t\tx: 0,\n\t\t\ty: 0,\n\t\t\twidth: 0,\n\t\t\theight: 0,\n\t\t\tangle: 0,\n\t\t\tspeed: 0,\n\t\t\taverageAngle: 0,\n\t\t\taverageSpeed: 0\n\t\t};\n\t\tthis.buffer = [];\n\t};\n\n\tupdateBounds() {\n\t\tif ( this.el !== window ) {\n\t\t\treturn ( this.bounds = this.el.getBoundingClientRect() );\n\t\t} else {\n\t\t\treturn ( this.bounds = {\n\t\t\t\ttop: 0,\n\t\t\t\tleft: 0,\n\t\t\t\twidth: window.innerWidth,\n\t\t\t\theight: window.innerHeight\n\t\t\t} );\n\t\t}\n\t}\n\n\tupdate( e ) {\n\t\tvar state = {\n\t\t\tevent: e,\n\t\t\tx: e.pageX,\n\t\t\ty: e.pageY\n\t\t};\n\n\t\tif ( this.el !== window ) {\n\t\t\tstate.x -= this.bounds.left - window.pageXOffset;\n\t\t\tstate.y -= this.bounds.top - window.pageYOffset;\n\t\t}\n\n\t\tstate.ratioX = state.x / this.bounds.width;\n\t\tstate.ratioY = state.y / this.bounds.height;\n\n\t\tstate.ratioCenterX = 2 * ( state.ratioX - 0.5 );\n\t\tstate.ratioCenterY = 2 * ( state.ratioY - 0.5 );\n\n\t\tif ( this.buffer.length > 1 ) {\n\t\t\tlet [ dx, dy ] = delta( this.buffer[ 0 ].x, this.buffer[ 0 ].y, state.x, state.y );\n\t\t\tstate.dx = dx;\n\t\t\tstate.dy = dy;\n\t\t\tstate.angle = angle( this.buffer[ 0 ].x, this.buffer[ 0 ].y, state.x, state.y );\n\t\t\tstate.speed = dist( this.buffer[ 0 ].x, this.buffer[ 0 ].y, state.x, state.y );\n\t\t}\n\n\t\tbuffer( this.buffer, state, this.bufferLength );\n\t\treturn ( this._state = state );\n\t};\n\n\t// -----------------------------------------------------\n\t// Getters & Setters\n\n\tset el( el ) {\n\t\tthis._el = el;\n\t\tthis.bounds = this.updateBounds();\n\t}\n\n\tget el() {\n\t\treturn this._el;\n\t}\n\n\tget state() {\n\t\treturn this._state;\n\t};\n\n\tget averageSpeed() {\n\t\treturn mean( this.buffer.map( ( state ) => state.speed ) );\n\t};\n\n\tget averageAngle() {\n\t\treturn mean( this.buffer.map( ( state ) => state.angle ) );\n\t};\n}\n","// for consistency all time is in milliseconds by default\nexport default class AnimationPlayer {\n\tconstructor( update, draw ) {\n\t\tthis.timeout = null;\n\t\tthis.raf = null;\n\t\tthis.currentTime = 0;\n\t\tthis.fps = 60;\n\t\tthis._update = update || this._update;\n\t\tthis._draw = draw || this._draw;\n\t\tthis.duration = null;\n\t\tthis.lastLoopTime = -1;\n\t\tthis.update = this.update.bind( this );\n\t\tthis.draw = this.draw.bind( this );\n\t}\n\n\tget timeRemaining() {\n\t\tif ( this.duration ) {\n\t\t\treturn this.duration - this.currentTime;\n\t\t}\n\t\tconsole.warn( 'duration must be set to find timeRemaining' );\n\t\treturn undefined;\n\t}\n\n\tget percentComplete() {\n\t\tif ( this.duration ) {\n\t\t\treturn this.currentTime / this.duration;\n\t\t}\n\t\tconsole.warn( 'duration must be set to find percentComplete' );\n\t\treturn undefined;\n\t}\n\n\tget fps() {\n\t\treturn this._fps;\n\t}\n\n\tset fps( val ) {\n\t\tthis._fps = val;\n\t\tthis.tickIntervalMillis = 1000 / this._fps;\n\t}\n\n\tplay() {\n\t\tif ( this.timeout ) return;\n\t\tthis.lastLoopTime = this.lastTickTime = Date.now();\n\t\tthis.update();\n\t\tthis.draw();\n\t}\n\n\tstop() {\n\t\tclearTimeout( this.timeout );\n\t\tcancelAnimationFrame( this.raf );\n\t\tthis.timeout = null;\n\t}\n\n\treset() {\n\t\tthis.stop();\n\t\tthis.currentTime = 0;\n\t}\n\n\tupdate() {\n\t\tvar now = Date.now();\n\t\tvar loopTime = now - this.lastLoopTime;\n\n\t\tthis.currentTime += loopTime;\n\t\tthis.currentTick = Math.round( this.currentTime / this.tickIntervalMillis );\n\n\t\tvar nextTickTime = ( this.currentTick + 1 ) * this.tickIntervalMillis;\n\t\tvar timeToNextTick = nextTickTime - this.currentTime;\n\n\t\tthis.lastLoopTime = now;\n\n\t\tthis.timeout = setTimeout( this.update, timeToNextTick );\n\t\tthis._update( {\n\t\t\tcurrentTime: this.currentTime,\n\t\t\tcurrentTick: this.currentTick\n\t\t} );\n\t}\n\n\tdraw() {\n\t\tthis._draw();\n\t\tthis.raf = requestAnimationFrame( this.draw );\n\t}\n\n\t_update( data ) {}\n\t_draw() {}\n}\n","// for consistency all time is in milliseconds\nexport default class CuePoint {\n\tconstructor( time, callback ) {\n\t\tthis.time = time;\n\t\tthis.callback = callback;\n\t\tthis.reset();\n\t}\n\n\texecute() {\n\t\tthis.runCount++;\n\t\tthis.callback();\n\t}\n\n\treset() {\n\t\tthis.runCount = 0;\n\t}\n}\n","// Ported from Stefan Gustavson's java implementation\n// http://staffwww.itn.liu.se/~stegu/simplexnoise/simplexnoise.pdf\n// Read Stefan's excellent paper for details on how this code works.\n//\n// Sean McCullough banksean@gmail.com\n//\n\n/**\n * You can pass in a random number generator object if you like.\n * It is assumed to have a random() method.\n */\nvar SimplexNoise = function ( random ) {\n\tif ( random === undefined ) random = Math.random;\n\tthis.grad3 = [\n\t\t[ 1, 1, 0 ],\n\t\t[ -1, 1, 0 ],\n\t\t[ 1, -1, 0 ],\n\t\t[ -1, -1, 0 ],\n\t\t[ 1, 0, 1 ],\n\t\t[ -1, 0, 1 ],\n\t\t[ 1, 0, -1 ],\n\t\t[ -1, 0, -1 ],\n\t\t[ 0, 1, 1 ],\n\t\t[ 0, -1, 1 ],\n\t\t[ 0, 1, -1 ],\n\t\t[ 0, -1, -1 ]\n\t];\n\tthis.p = [];\n\tfor ( var i = 0; i < 256; i++ ) {\n\t\tthis.p[ i ] = Math.floor( random() * 256 );\n\t}\n\t// To remove the need for index wrapping, double the permutation table length\n\tthis.perm = [];\n\tfor ( var i = 0; i < 512; i++ ) {\n\t\tthis.perm[ i ] = this.p[ i & 255 ];\n\t}\n\n\t// A lookup table to traverse the simplex around a given point in 4D.\n\t// Details can be found where this table is used, in the 4D noise method.\n\tthis.simplex = [\n\t\t[ 0, 1, 2, 3 ],\n\t\t[ 0, 1, 3, 2 ],\n\t\t[ 0, 0, 0, 0 ],\n\t\t[ 0, 2, 3, 1 ],\n\t\t[ 0, 0, 0, 0 ],\n\t\t[ 0, 0, 0, 0 ],\n\t\t[ 0, 0, 0, 0 ],\n\t\t[ 1, 2, 3, 0 ],\n\t\t[ 0, 2, 1, 3 ],\n\t\t[ 0, 0, 0, 0 ],\n\t\t[ 0, 3, 1, 2 ],\n\t\t[ 0, 3, 2, 1 ],\n\t\t[ 0, 0, 0, 0 ],\n\t\t[ 0, 0, 0, 0 ],\n\t\t[ 0, 0, 0, 0 ],\n\t\t[ 1, 3, 2, 0 ],\n\t\t[ 0, 0, 0, 0 ],\n\t\t[ 0, 0, 0, 0 ],\n\t\t[ 0, 0, 0, 0 ],\n\t\t[ 0, 0, 0, 0 ],\n\t\t[ 0, 0, 0, 0 ],\n\t\t[ 0, 0, 0, 0 ],\n\t\t[ 0, 0, 0, 0 ],\n\t\t[ 0, 0, 0, 0 ],\n\t\t[ 1, 2, 0, 3 ],\n\t\t[ 0, 0, 0, 0 ],\n\t\t[ 1, 3, 0, 2 ],\n\t\t[ 0, 0, 0, 0 ],\n\t\t[ 0, 0, 0, 0 ],\n\t\t[ 0, 0, 0, 0 ],\n\t\t[ 2, 3, 0, 1 ],\n\t\t[ 2, 3, 1, 0 ],\n\t\t[ 1, 0, 2, 3 ],\n\t\t[ 1, 0, 3, 2 ],\n\t\t[ 0, 0, 0, 0 ],\n\t\t[ 0, 0, 0, 0 ],\n\t\t[ 0, 0, 0, 0 ],\n\t\t[ 2, 0, 3, 1 ],\n\t\t[ 0, 0, 0, 0 ],\n\t\t[ 2, 1, 3, 0 ],\n\t\t[ 0, 0, 0, 0 ],\n\t\t[ 0, 0, 0, 0 ],\n\t\t[ 0, 0, 0, 0 ],\n\t\t[ 0, 0, 0, 0 ],\n\t\t[ 0, 0, 0, 0 ],\n\t\t[ 0, 0, 0, 0 ],\n\t\t[ 0, 0, 0, 0 ],\n\t\t[ 0, 0, 0, 0 ],\n\t\t[ 2, 0, 1, 3 ],\n\t\t[ 0, 0, 0, 0 ],\n\t\t[ 0, 0, 0, 0 ],\n\t\t[ 0, 0, 0, 0 ],\n\t\t[ 3, 0, 1, 2 ],\n\t\t[ 3, 0, 2, 1 ],\n\t\t[ 0, 0, 0, 0 ],\n\t\t[ 3, 1, 2, 0 ],\n\t\t[ 2, 1, 0, 3 ],\n\t\t[ 0, 0, 0, 0 ],\n\t\t[ 0, 0, 0, 0 ],\n\t\t[ 0, 0, 0, 0 ],\n\t\t[ 3, 1, 0, 2 ],\n\t\t[ 0, 0, 0, 0 ],\n\t\t[ 3, 2, 0, 1 ],\n\t\t[ 3, 2, 1, 0 ]\n\t];\n};\n\nSimplexNoise.prototype.dot = function ( g, x, y ) {\n\treturn g[ 0 ] * x + g[ 1 ] * y;\n};\n\nSimplexNoise.prototype.noise = function ( xin, yin ) {\n\tvar n0, n1, n2; // Noise contributions from the three corners\n\t// Skew the input space to determine which simplex cell we're in\n\tvar F2 = 0.5 * ( Math.sqrt( 3.0 ) - 1.0 );\n\tvar s = ( xin + yin ) * F2; // Hairy factor for 2D\n\tvar i = Math.floor( xin + s );\n\tvar j = Math.floor( yin + s );\n\tvar G2 = ( 3.0 - Math.sqrt( 3.0 ) ) / 6.0;\n\tvar t = ( i + j ) * G2;\n\tvar X0 = i - t; // Unskew the cell origin back to (x,y) space\n\tvar Y0 = j - t;\n\tvar x0 = xin - X0; // The x,y distances from the cell origin\n\tvar y0 = yin - Y0;\n\t// For the 2D case, the simplex shape is an equilateral triangle.\n\t// Determine which simplex we are in.\n\tvar i1, j1; // Offsets for second (middle) corner of simplex in (i,j) coords\n\tif ( x0 > y0 ) {\n\t\ti1 = 1;\n\t\tj1 = 0;\n\t} // lower triangle, XY order: (0,0)->(1,0)->(1,1)\n\telse {\n\t\ti1 = 0;\n\t\tj1 = 1;\n\t} // upper triangle, YX order: (0,0)->(0,1)->(1,1)\n\t// A step of (1,0) in (i,j) means a step of (1-c,-c) in (x,y), and\n\t// a step of (0,1) in (i,j) means a step of (-c,1-c) in (x,y), where\n\t// c = (3-sqrt(3))/6\n\tvar x1 = x0 - i1 + G2; // Offsets for middle corner in (x,y) unskewed coords\n\tvar y1 = y0 - j1 + G2;\n\tvar x2 = x0 - 1.0 + 2.0 * G2; // Offsets for last corner in (x,y) unskewed coords\n\tvar y2 = y0 - 1.0 + 2.0 * G2;\n\t// Work out the hashed gradient indices of the three simplex corners\n\tvar ii = i & 255;\n\tvar jj = j & 255;\n\tvar gi0 = this.perm[ ii + this.perm[ jj ] ] % 12;\n\tvar gi1 = this.perm[ ii + i1 + this.perm[ jj + j1 ] ] % 12;\n\tvar gi2 = this.perm[ ii + 1 + this.perm[ jj + 1 ] ] % 12;\n\t// Calculate the contribution from the three corners\n\tvar t0 = 0.5 - x0 * x0 - y0 * y0;\n\tif ( t0 < 0 ) n0 = 0.0;\n\telse {\n\t\tt0 *= t0;\n\t\tn0 = t0 * t0 * this.dot( this.grad3[ gi0 ], x0, y0 ); // (x,y) of grad3 used for 2D gradient\n\t}\n\tvar t1 = 0.5 - x1 * x1 - y1 * y1;\n\tif ( t1 < 0 ) n1 = 0.0;\n\telse {\n\t\tt1 *= t1;\n\t\tn1 = t1 * t1 * this.dot( this.grad3[ gi1 ], x1, y1 );\n\t}\n\tvar t2 = 0.5 - x2 * x2 - y2 * y2;\n\tif ( t2 < 0 ) n2 = 0.0;\n\telse {\n\t\tt2 *= t2;\n\t\tn2 = t2 * t2 * this.dot( this.grad3[ gi2 ], x2, y2 );\n\t}\n\t// Add contributions from each corner to get the final noise value.\n\t// The result is scaled to return values in the interval [-1,1].\n\treturn 70.0 * ( n0 + n1 + n2 );\n};\n\n// 3D simplex noise\nSimplexNoise.prototype.noise3d = function ( xin, yin, zin ) {\n\tvar n0, n1, n2, n3; // Noise contributions from the four corners\n\t// Skew the input space to determine which simplex cell we're in\n\tvar F3 = 1.0 / 3.0;\n\tvar s = ( xin + yin + zin ) * F3; // Very nice and simple skew factor for 3D\n\tvar i = Math.floor( xin + s );\n\tvar j = Math.floor( yin + s );\n\tvar k = Math.floor( zin + s );\n\tvar G3 = 1.0 / 6.0; // Very nice and simple unskew factor, too\n\tvar t = ( i + j + k ) * G3;\n\tvar X0 = i - t; // Unskew the cell origin back to (x,y,z) space\n\tvar Y0 = j - t;\n\tvar Z0 = k - t;\n\tvar x0 = xin - X0; // The x,y,z distances from the cell origin\n\tvar y0 = yin - Y0;\n\tvar z0 = zin - Z0;\n\t// For the 3D case, the simplex shape is a slightly irregular tetrahedron.\n\t// Determine which simplex we are in.\n\tvar i1, j1, k1; // Offsets for second corner of simplex in (i,j,k) coords\n\tvar i2, j2, k2; // Offsets for third corner of simplex in (i,j,k) coords\n\tif ( x0 >= y0 ) {\n\t\tif ( y0 >= z0 ) {\n\t\t\ti1 = 1;\n\t\t\tj1 = 0;\n\t\t\tk1 = 0;\n\t\t\ti2 = 1;\n\t\t\tj2 = 1;\n\t\t\tk2 = 0;\n\t\t} // X Y Z order\n\t\telse if ( x0 >= z0 ) {\n\t\t\ti1 = 1;\n\t\t\tj1 = 0;\n\t\t\tk1 = 0;\n\t\t\ti2 = 1;\n\t\t\tj2 = 0;\n\t\t\tk2 = 1;\n\t\t} // X Z Y order\n\t\telse {\n\t\t\ti1 = 0;\n\t\t\tj1 = 0;\n\t\t\tk1 = 1;\n\t\t\ti2 = 1;\n\t\t\tj2 = 0;\n\t\t\tk2 = 1;\n\t\t} // Z X Y order\n\t} else { // x0<y0\n\t\tif ( y0 < z0 ) {\n\t\t\ti1 = 0;\n\t\t\tj1 = 0;\n\t\t\tk1 = 1;\n\t\t\ti2 = 0;\n\t\t\tj2 = 1;\n\t\t\tk2 = 1;\n\t\t} // Z Y X order\n\t\telse if ( x0 < z0 ) {\n\t\t\ti1 = 0;\n\t\t\tj1 = 1;\n\t\t\tk1 = 0;\n\t\t\ti2 = 0;\n\t\t\tj2 = 1;\n\t\t\tk2 = 1;\n\t\t} // Y Z X order\n\t\telse {\n\t\t\ti1 = 0;\n\t\t\tj1 = 1;\n\t\t\tk1 = 0;\n\t\t\ti2 = 1;\n\t\t\tj2 = 1;\n\t\t\tk2 = 0;\n\t\t} // Y X Z order\n\t}\n\t// A step of (1,0,0) in (i,j,k) means a step of (1-c,-c,-c) in (x,y,z),\n\t// a step of (0,1,0) in (i,j,k) means a step of (-c,1-c,-c) in (x,y,z), and\n\t// a step of (0,0,1) in (i,j,k) means a step of (-c,-c,1-c) in (x,y,z), where\n\t// c = 1/6.\n\tvar x1 = x0 - i1 + G3; // Offsets for second corner in (x,y,z) coords\n\tvar y1 = y0 - j1 + G3;\n\tvar z1 = z0 - k1 + G3;\n\tvar x2 = x0 - i2 + 2.0 * G3; // Offsets for third corner in (x,y,z) coords\n\tvar y2 = y0 - j2 + 2.0 * G3;\n\tvar z2 = z0 - k2 + 2.0 * G3;\n\tvar x3 = x0 - 1.0 + 3.0 * G3; // Offsets for last corner in (x,y,z) coords\n\tvar y3 = y0 - 1.0 + 3.0 * G3;\n\tvar z3 = z0 - 1.0 + 3.0 * G3;\n\t// Work out the hashed gradient indices of the four simplex corners\n\tvar ii = i & 255;\n\tvar jj = j & 255;\n\tvar kk = k & 255;\n\tvar gi0 = this.perm[ ii + this.perm[ jj + this.perm[ kk ] ] ] % 12;\n\tvar gi1 = this.perm[ ii + i1 + this.perm[ jj + j1 + this.perm[ kk + k1 ] ] ] % 12;\n\tvar gi2 = this.perm[ ii + i2 + this.perm[ jj + j2 + this.perm[ kk + k2 ] ] ] % 12;\n\tvar gi3 = this.perm[ ii + 1 + this.perm[ jj + 1 + this.perm[ kk + 1 ] ] ] % 12;\n\t// Calculate the contribution from the four corners\n\tvar t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0;\n\tif ( t0 < 0 ) n0 = 0.0;\n\telse {\n\t\tt0 *= t0;\n\t\tn0 = t0 * t0 * this.dot( this.grad3[ gi0 ], x0, y0, z0 );\n\t}\n\tvar t1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1;\n\tif ( t1 < 0 ) n1 = 0.0;\n\telse {\n\t\tt1 *= t1;\n\t\tn1 = t1 * t1 * this.dot( this.grad3[ gi1 ], x1, y1, z1 );\n\t}\n\tvar t2 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2;\n\tif ( t2 < 0 ) n2 = 0.0;\n\telse {\n\t\tt2 *= t2;\n\t\tn2 = t2 * t2 * this.dot( this.grad3[ gi2 ], x2, y2, z2 );\n\t}\n\tvar t3 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3;\n\tif ( t3 < 0 ) n3 = 0.0;\n\telse {\n\t\tt3 *= t3;\n\t\tn3 = t3 * t3 * this.dot( this.grad3[ gi3 ], x3, y3, z3 );\n\t}\n\t// Add contributions from each corner to get the final noise value.\n\t// The result is scaled to stay just inside [-1,1]\n\treturn 32.0 * ( n0 + n1 + n2 + n3 );\n};\nmodule.exports = SimplexNoise;\nexport default SimplexNoise;\n","// supports 16bit color\n// tracks color in the RGB space\n\n// FIXME: this class doesn't do much yet.\n\nexport default class Color {\n\tconstructor( r, g, b, a, mode = 'rgb' ) {\n\t\tthis.r = 0xff;\n\t\tthis.g = 0xff;\n\t\tthis.b = 0xff;\n\t\tthis.a = 1;\n\n\t\tif ( r === undefined ) return this;\n\n\t\tif ( r && g === undefined && b === undefined ) {\n\t\t\tlet c = Color.parseColor( r );\n\t\t\tr = c.r;\n\t\t\tg = c.g;\n\t\t\tb = c.b;\n\t\t}\n\n\t\tswitch ( mode ) {\n\t\t\tcase 'hsl':\n\t\t\t\tthis.setHSL( r, g, b );\n\t\t\t\tbreak;\n\t\t\tcase 'rgb':\n\t\t\tdefault:\n\t\t\t\tthis.setRGB( r, g, b, a );\n\t\t}\n\t}\n\n\tsetHSL( h, s, l, a ) {\n\t\treturn this;\n\t}\n\tsetRGB( r, g, b, a ) {\n\t\treturn this;\n\t}\n\n\tget int() {\n\t\treturn ( this.r << 16 ) | ( this.g << 8 ) | this.b;\n\t}\n\n\tget hex() {\n\t\treturn `#${this.int}`;\n\t}\n\n\tget hsl() {}\n\tget h() {}\n\tget s() {}\n\tget l() {}\n\n\tset h( val ) {\n\t\tthis.setHSL( val, s, l );\n\t\treturn val;\n\t}\n\n\tset s( val ) {\n\t\tthis.setHSL( h, val, l );\n\t\treturn val;\n\t}\n\n\tset l( val ) {\n\t\tthis.setHSL( h, s, val );\n\t\treturn val;\n\t}\n\n\tstatic parseColor( input ) {\n\t\tif ( input instanceof Color ) return Color;\n\t\tif ( typeof input === 'string' ) {\n\t\t\tinput = parseInt( input, 16 );\n\t\t}\n\t\tif ( typeof input === 'number' ) {\n\t\t\treturn {\n\t\t\t\tr: input >> 16 & 0xff,\n\t\t\t\tg: input >> 8 & 0xff,\n\t\t\t\tb: input & 0xff\n\t\t\t}\n\t\t}\n\t\treturn undefined;\n\t}\n}\n"],"names":["buffer","buf","val","bufferLength","length","unshift","pop","sampleFn","fn","period","numSamples","Array","map","n","i","mean","arr","reduce","sum","easedMean","direction","easing","easeFn","steps","Math","pow","weights","reverse","weightedAverage","values","sumWeight","weighted","sumWeighted","a","b","normalize","max","v","midpoint","x0","y0","x1","y1","halfdx","halfdy","lerp","clamp","min","path","smooth","resolution","flatPath","toPoints","midpoints","endi","concat","x","y","curves","_i","_endi","push","cubicBezier","points","bez","toArray","pt","interpolate","step","cubicBezierPosition","x2","y2","t","cpX","cpY","angle","pos","delta","dx","dy","ang","atan2","TAU","dist","sqrt","normalizeAngle","rad","d2r","deg","r2d","random","seed","setSeed","undefined","range","_a_","_z_","_c_","_m_","TriggerBetween","px","start","end","onEntered","onLeft","noop","Entered","Left","Hopped","IsBetween","Crossed","target","CrossedForward","CrossedReverse","sortByTime","time","drawToCtx","img","ctx","drawImage","width","height","getImageData","Point","bufferX","bufferY","speed","this","_x","_y","PI","PHI","e","SIN_WAVE","sin","COS_WAVE","cos","TAN_WAVE","tan","Arc","radius","segments","close","startAngle","endAngle","_points","sweep","segmentSweep","_translate","translate","forEach","MouseTelemetrics","options","el","window","_state","bounds","getBoundingClientRect","innerWidth","innerHeight","state","pageX","pageY","left","pageXOffset","top","pageYOffset","ratioX","ratioY","ratioCenterX","ratioCenterY","_el","updateBounds","AnimationPlayer","update","draw","timeout","raf","currentTime","fps","_update","_draw","duration","lastLoopTime","bind","lastTickTime","Date","now","stop","loopTime","currentTick","round","tickIntervalMillis","nextTickTime","timeToNextTick","setTimeout","requestAnimationFrame","data","warn","_fps","CuePoint","callback","reset","runCount","module","exports","Timeline","_cuePoints","_time","_prevTime","active","cp","sort","filter","_this","execute","SimplexNoise","grad3","p","floor","perm","simplex","prototype","dot","g","noise","xin","yin","n0","n1","n2","i1","j1","F2","s","j","G2","X0","Y0","ii","jj","gi0","gi1","gi2","t0","t1","t2","noise3d","zin","n3","k1","i2","j2","k2","F3","k","G3","Z0","z0","z1","z2","x3","y3","z3","kk","gi3","t3","Color","r","mode","c","parseColor","setHSL","setRGB","h","l","input","parseInt","Colormap","colormapSize","image","colormapData","colormap","colormapCtx","_colormapSize","Image","createCanvas","getContext","loadColormap","propX","abs","propY","col","row","rowWidth","pixelIndex","src","crossOrigin","onload","onerror","onError","onProgress","document","createElement","onLoad","onprogress"],"mappings":"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"}